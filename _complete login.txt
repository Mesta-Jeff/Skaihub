

import React, { useState } from 'react';
import { StyleSheet, Text, TextInput, View, TouchableOpacity, ScrollView, Alert, Image, Dimensions, useWindowDimensions, } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { TabView, SceneMap, TabBar } from 'react-native-tab-view';

import { BASE_URL } from '../constants/Var';
import Colors from '../constants/Colors';

export const SLIDER_WIDTH = Dimensions.get('window').width + 80;
export const ITEM_WIDTH = Math.round(SLIDER_WIDTH * 0.78);

const renderTabBar = props => (
  <TabBar
    {...props}
    indicatorStyle={{ backgroundColor: Colors.defaultColor }}
    style={{ backgroundColor: Colors.defaultWhite, shadowColor: 'silver' }}
    labelStyle={{ color: Colors.defaultColor, fontSize: 12, fontWeight: 'bold' }}
  />
);

export default function Login({ navigation }) {

  const layout = useWindowDimensions();
  const width = Dimensions.get('window').width;


  const renderScene = SceneMap({

    first: () => (
      <View style={{ flex: 1, backgroundColor: Colors.defaultWhite, alignItems: 'center', justifyContent: 'center' }}>
        <View style={{ flex: 1, }}>
          <View style={styles.loginContainer}>
            <View style={styles.innerContainer}>

              <Text allowFontScaling={false} style={styles.headerText}>APP NAME</Text>

              <TextInput
                style={styles.input}
                placeholder="Enter username here"
                value={email}
                onChangeText={(text) => setEmail(text)}
              />
              <TextInput
                style={styles.input}
                placeholder="Provide Password"
                passwordRules={true}
                secureTextEntry
                se
                value={password}
                onChangeText={(text) => setPassword(text)}
              />

              <TouchableOpacity
                style={styles.buttonStyles}
                onPress={handlePress}
                disabled={loading}>
                <Text allowFontScaling={false} style={styles.buttonText}>{loading ? 'Please wait...' : 'Continue'}</Text>
              </TouchableOpacity>

              {
                imageSrc && imageSrc !== 'null' ? (
                  <View style={styles.card}>
                    <Image source={{ uri: imageSrc }} style={styles.cardImage} />
                  </View>
                ) : null
              }

            </View>
          </View>
        </View>
      </View>
    ),

    second: () => (
      <View style={{ flex: 1, backgroundColor: Colors.defaultWhite, alignItems: 'center', }}>
        <View style={{ flex: 1, }}>
          <Text>Text page 2</Text>
        </View>
      </View>
    ),
    third: () => (
      <View style={{ flex: 1, backgroundColor: Colors.defaultWhite, alignItems: 'center', }}>
        <View style={{ flex: 1, }}>
          <Text>Text page 2</Text>
        </View>
      </View>
    ),
  });

  const [index, setIndex] = React.useState(0);
  const [routes, setRoutes] = React.useState([
    { key: 'first', title: 'Login' },
    { key: 'second', title: 'Reset' },
    { key: 'third', title: 'Sign Up' },
  ]);

  const handleIndexChange = newIndex => {
    setIndex(newIndex);
  };

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [imageSrc, setImageSrc] = useState('');


  const loginUser = () => {
    const url = `${BASE_URL}/authentication/login?email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`;

    return fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
    })
      .then((response) => response.json())
      .then((responseJson) => {
        setLoading(false);
        if (responseJson.success) {
          setImageSrc(responseJson.data.image);
          const user = responseJson.data;
          // Alert.alert(
          //   'Success Alert',
          //   `User found successfully. 
          //   Name: ${user.name}
          //   Email: ${user.email}
          //   Phone: ${user.phone}
          //   Image: ${user.image}
          //   Role: ${user.role}
          //   Token: ${user.token}
          //   User Key: ${user.userKey}
          //   API Key: ${user.apiKey}`,
          //   [{ text: 'OK', onPress: () => navigation.push('Home') }]
          // );
        } else {
          Alert.alert('Error Alert', responseJson.message || 'Failed to authenticate user');
        }
      })
      .catch((error) => {
        setLoading(false);
        Alert.alert('Error', `An error occurred. Please try again. ${error}`);
        console.error('Error:', error);
      });
  };

  const handlePress = () => {
    if (!email || !password) {
      Alert.alert('Skai Alert', 'Sorry, an error has been found. All fields are required.');
      return;
    }

    setLoading(true);
    loginUser();
  };


  return (
    <SafeAreaProvider style={styles.container}>
       <StatusBar style="auto" />

      <View style={[styles.row, styles.topRow]}></View>
      <View style={[styles.row, styles.middleRow]}>
        <Text allowFontScaling={false} style={styles.textWelcome}>You're Welcome</Text>
        <Text allowFontScaling={false} style={styles.headerText}>APP NAME</Text>
        <View style={styles.row1}>
          <FontAwesome style={styles.ico} name="folder-open" />
          <Text style={{ color: Colors.defaultWhite }}>VIew our policies</Text>
        </View>
      </View>
      <View style={[styles.row, styles.bottomRow]}>
        <Text style={{ color: Colors.defaultSilver, fontSize: 18, fontFamily: 'RobotoMedium' }}>What do you intend to do..?</Text>
        <TabView
          renderTabBar={renderTabBar}
          navigationState={{ index, routes }}
          renderScene={renderScene}
          onIndexChange={handleIndexChange}
          initialLayout={{ width: layout.width }}
        />
      </View>

    </SafeAreaProvider>
  );
}

// Add your styles here...
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.defaultWhite,
    justifyContent: 'start',
  },

  row: {
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 20,
  },
  topRow: {
    backgroundColor: Colors.defaultColor,
    height: 90
  },
  middleRow: {
    width: ITEM_WIDTH,
    backgroundColor: Colors.defaultColor,
    height: 220,
    marginRight: 20,
    marginLeft: 15,
    marginVertical: 20,
    borderRadius: 12,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 5,
    },
    shadowOpacity: 0.29,
    shadowRadius: 4.65,
    elevation: 1.8,
    justifyContent: 'flex-end',
    overflow: 'hidden',
  },

  row1: {
    backgroundColor: Colors.defaultColorDeep,
    height: 80,
    width: '100%',
    marginBottom: -20,
    opacity: 0.5,
    alignItems: 'center',
    justifyContent: 'center'
  },

  ico: {
    color: Colors.defaultWhite,
    fontSize: 20,
    alignItems: 'center',
    textAlign: 'center',
  },

  bottomRow: {
    justifyContent: 'flex-start',
    height: '100%',
    marginTop: -7,
    width: ITEM_WIDTH,
    marginRight: 20,
    marginLeft: 15,
    alignItems: 'stretch',
  },

  innerContainer: {
    backgroundColor: Colors.defaultWhite,
    alignItems: 'center',
    justifyContent: 'center',
    flexGrow: 1,
  },

  loginContainer: {
    marginBottom: 10,
    width: ITEM_WIDTH,
    justifyContent: 'center',
    alignItems: 'stretch',
  },

  input: {
    height: 50,
    width: '100%',
    borderColor: Colors.defaultColorLight,
    borderWidth: 1.5,
    marginBottom: 10,
    paddingHorizontal: 10,
    borderRadius: 10,
  },

  headerText: {
    color: Colors.defaultWhite,
    marginBottom: 10,
    fontSize: 34,
    paddingHorizontal: 5,
    textAlign: 'center',
    fontFamily: 'PoppinsBlack',
  },

  textWelcome: {
    color: 'white',
    fontSize: 18,
    letterSpacing: 5
  },

  buttonStyles: {
    backgroundColor: Colors.defaultColor,
    borderColor: Colors.defaultColorLight,
    borderWidth: 2,
    paddingHorizontal: 40,
    paddingVertical: 15,
    borderRadius: 5,
    marginTop: 10
  },

  buttonText: {
    color: Colors.defaultWhite,
    fontSize: 16,
    fontWeight: 'bold',
  },

  card: {
    marginTop: 20,
    alignItems: 'center',
    justifyContent: 'center',
    width: 220,
    height: 220,
    borderColor: Colors.defaultColor,
    borderWidth: 3,
    borderRadius: 200
  },

  cardImage: {
    width: 200,
    height: 200,
    resizeMode: 'cover',
    borderRadius: 100
  },
});








<KeyboardAvoidingView style={styles.keyboard} behavior={Platform.OS == "ios" ? "padding" : "height"}
        enabled keyboardVerticalOffset={64} > 





